/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Response Message class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

#include <cctype>

#include "Poco/Net/NetException.h"
#include "Poco/NumberFormatter.h"
#include "Poco/NumberParser.h"
#include "Poco/DateTime.h"
#include "Poco/DateTimeFormatter.h"
#include "Poco/DateTimeFormat.h"
#include "Poco/DateTimeParser.h"

#include "RTSPResponse.h"


using Poco::DateTime;
using Poco::NumberFormatter;
using Poco::NumberParser;
using Poco::DateTimeFormatter;
using Poco::DateTimeFormat;
using Poco::DateTimeParser;
using Poco::Net::NoMessageException;
using Poco::Net::MessageException;


namespace RTSP {


const std::string RTSPResponse::RTSP_REASON_CONTINUE							= "Continue";

const std::string RTSPResponse::RTSP_REASON_OK									= "OK";
const std::string RTSPResponse::RTSP_REASON_CREATED								= "Created";
const std::string RTSPResponse::RTSP_REASON_LOW_ON_STORAGE_SPACE				= "Low on Storage Space";

const std::string RTSPResponse::RTSP_REASON_MULTIPLE_CHOICES					= "Multiple Choices";
const std::string RTSPResponse::RTSP_REASON_MOVED_PERMANENTLY					= "Moved Permanently";
const std::string RTSPResponse::RTSP_REASON_MOVED_TEMPORARILY					= "Moved Temporarily";
const std::string RTSPResponse::RTSP_REASON_SEE_OTHER							= "See Other";
const std::string RTSPResponse::RTSP_REASON_USE_PROXY							= "Use Proxy";

const std::string RTSPResponse::RTSP_REASON_BAD_REQUEST							= "Bad Request";
const std::string RTSPResponse::RTSP_REASON_UNAUTHORIZED						= "Unauthorized";
const std::string RTSPResponse::RTSP_REASON_PAYMENT_REQUIRED					= "Payment Required";
const std::string RTSPResponse::RTSP_REASON_FORBIDDEN							= "Forbidden";
const std::string RTSPResponse::RTSP_REASON_NOT_FOUND							= "Not Found";
const std::string RTSPResponse::RTSP_REASON_METHOD_NOT_ALLOWED					= "Method Not Allowed";
const std::string RTSPResponse::RTSP_REASON_NOT_ACCEPTABLE						= "Not Acceptable";
const std::string RTSPResponse::RTSP_REASON_PROXY_AUTHENTICATION_REQUIRED		= "Proxy Authentication Required";
const std::string RTSPResponse::RTSP_REASON_REQUEST_TIMEOUT						= "Request Timeout";
const std::string RTSPResponse::RTSP_REASON_GONE								= "Gone";
const std::string RTSPResponse::RTSP_REASON_LENGTH_REQUIRED						= "Length Required";
const std::string RTSPResponse::RTSP_REASON_PRECONDITION_FAILED					= "Precondition Failed";
const std::string RTSPResponse::RTSP_REASON_REQUEST_ENTITY_TOO_LARGE			= "Request Entity Too Large";
const std::string RTSPResponse::RTSP_REASON_REQUEST_URI_TOO_LONG				= "Request-URI Too Long";
const std::string RTSPResponse::RTSP_REASON_UNSUPPORTED_MEDIA_TYPE				= "Unsupported Media Type";
const std::string RTSPResponse::RTSP_REASON_INVALID_PARAMETER					= "Invalid parameter";
const std::string RTSPResponse::RTSP_REASON_ILLEGAL_CONFERENCE_IDENTIFIER		= "Illegal Conference Identifier";
const std::string RTSPResponse::RTSP_REASON_NOT_ENOUGH_BANDWIDTH				= "Not Enough Bandwidth";
const std::string RTSPResponse::RTSP_REASON_SESSION_NOT_FOUND					= "Session Not Found";
const std::string RTSPResponse::RTSP_REASON_METHOD_NOT_VALID_IN_THIS_STATE		= "Method Not Valid In This State";
const std::string RTSPResponse::RTSP_REASON_HEADER_FIELD_NOT_VALID				= "Header Field Not Valid";
const std::string RTSPResponse::RTSP_REASON_INVALID_RANGE						= "Invalid Range";
const std::string RTSPResponse::RTSP_REASON_PARAMETER_IS_READ_ONLY				= "Parameter Is Read-Only";
const std::string RTSPResponse::RTSP_REASON_AGGREGATE_OPERATION_NOT_ALLOWED		= "Aggregate Operation Not Allowed";
const std::string RTSPResponse::RTSP_REASON_ONLY_AGGREGATE_OPERATION_ALLOWED	= "Only Aggregate Operation Allowed";
const std::string RTSPResponse::RTSP_REASON_UNSUPPORTED_TRANSPORT				= "Unsupported Transport";
const std::string RTSPResponse::RTSP_REASON_DESTINATION_UNREACHABLE				= "Destination Unreachable";

const std::string RTSPResponse::RTSP_REASON_INTERNAL_SERVER_ERROR				= "Internal Server Error";
const std::string RTSPResponse::RTSP_REASON_NOT_IMPLEMENTED						= "Not Implemented";
const std::string RTSPResponse::RTSP_REASON_BAD_GATEWAY							= "Bad Gateway";
const std::string RTSPResponse::RTSP_REASON_SERVICE_UNAVAILABLE					= "Service Unavailable";
const std::string RTSPResponse::RTSP_REASON_GATEWAY_TIMEOUT						= "Gateway Timeout";
const std::string RTSPResponse::RTSP_REASON_VERSION_NOT_SUPPORTED				= "RTSP Version Not Supported";
const std::string RTSPResponse::RTSP_REASON_OPTION_NOT_SUPPORTED				= "Option not support";
const std::string RTSPResponse::RTSP_REASON_UNKNOWN								= "???";

const std::string RTSPResponse::DATE											= "Date";



RTSPResponse::RTSPResponse():
	_status(RTSP_OK),
	_reason(getReasonForStatus(RTSP_OK))
{
}

	
RTSPResponse::RTSPResponse(RTSPStatus status, const std::string& reason):
	_status(status),
	_reason(reason)
{
}


	
RTSPResponse::RTSPResponse(const std::string& version, RTSPStatus status, const std::string& reason):
	RTSPMessage(version),
	_status(status),
	_reason(reason)
{
}

	
RTSPResponse::RTSPResponse(RTSPStatus status):
	_status(status),
	_reason(getReasonForStatus(status))
{
}


RTSPResponse::RTSPResponse(const std::string& version, RTSPStatus status):
	RTSPMessage(version),
	_status(status),
	_reason(getReasonForStatus(status))
{
}


RTSPResponse::~RTSPResponse()
{
}


void RTSPResponse::setStatus(RTSPStatus status)
{
	_status = status;
}


void RTSPResponse::setStatus(const std::string& status)
{
	setStatus((RTSPStatus) NumberParser::parse(status));
}
	
	
void RTSPResponse::setReason(const std::string& reason)
{
	_reason = reason;
}


void RTSPResponse::setStatusAndReason(RTSPStatus status, const std::string& reason)
{
	_status = status;
	_reason = reason;
}

	
void RTSPResponse::setStatusAndReason(RTSPStatus status)
{
	setStatusAndReason(status, getReasonForStatus(status));
}


void RTSPResponse::setDate(const Poco::Timestamp& dateTime)
{
	set(DATE, DateTimeFormatter::format(dateTime, DateTimeFormat::HTTP_FORMAT));
}

	
Poco::Timestamp RTSPResponse::getDate() const
{
	const std::string& dateTime = get(DATE);
	int tzd;
	return DateTimeParser::parse(dateTime, tzd).timestamp();
}


void RTSPResponse::write(std::ostream& ostr) const
{
	ostr << getVersion() << " " << NumberFormatter::format((int) _status) << " " << _reason << "\r\n";
	RTSPMessage::write(ostr);
	ostr << "\r\n";
}


void RTSPResponse::read(std::istream& istr)
{
	static const int eof = std::char_traits<char>::eof();

	std::string version;
	std::string status;
	std::string reason;
	
	int ch =  istr.get();
	if (ch == eof) throw NoMessageException();
	while (std::isspace(ch)) ch = istr.get();
	if (ch == eof) throw MessageException("No RTSP response header");
	while (!std::isspace(ch) && ch != eof && version.length() < MAX_VERSION_LENGTH) { version += (char) ch; ch = istr.get(); }
	if (!std::isspace(ch)) throw MessageException("Invalid RTSP version string");
	while (std::isspace(ch)) ch = istr.get();
	while (!std::isspace(ch) && ch != eof && status.length() < MAX_STATUS_LENGTH) { status += (char) ch; ch = istr.get(); }
	if (!std::isspace(ch)) throw MessageException("Invalid RTSP status code");
	while (std::isspace(ch)) ch = istr.get();
	while (ch != '\r' && ch != '\n' && ch != eof && reason.length() < MAX_REASON_LENGTH) { reason += (char) ch; ch = istr.get(); }
	if (!std::isspace(ch)) throw MessageException("RTSP reason string too long");
	if (ch == '\r') ch = istr.get();

	RTSPMessage::read(istr);
	ch = istr.get();
	while (ch != '\n' && ch != eof) { ch = istr.get(); }
	setVersion(version);
	setStatus(status);
	setReason(reason);
}


const std::string& RTSPResponse::getReasonForStatus(RTSPStatus status)
{
	switch (status)
	{
	case RTSP_CONTINUE: 
		return RTSP_REASON_CONTINUE;
	case RTSP_OK: 
		return RTSP_REASON_OK;
	case RTSP_CREATED: 
		return RTSP_REASON_CREATED;
	case RTSP_LOW_ON_STORAGE_SPACE: 
		return RTSP_REASON_LOW_ON_STORAGE_SPACE;
	case RTSP_MULTIPLE_CHOICES: 
		return RTSP_REASON_MULTIPLE_CHOICES;
	case RTSP_MOVED_PERMANENTLY: 
		return RTSP_REASON_MOVED_PERMANENTLY;
	case RTSP_MOVED_TEMPORARILY: 
		return RTSP_REASON_MOVED_TEMPORARILY;
	case RTSP_SEE_OTHER: 
		return RTSP_REASON_SEE_OTHER;
	case RTSP_USE_PROXY: 
		return RTSP_REASON_USE_PROXY;
	case RTSP_BAD_REQUEST: 
		return RTSP_REASON_BAD_REQUEST;
	case RTSP_UNAUTHORIZED: 
		return RTSP_REASON_UNAUTHORIZED;
	case RTSP_PAYMENT_REQUIRED: 
		return RTSP_REASON_PAYMENT_REQUIRED;
	case RTSP_FORBIDDEN: 
		return RTSP_REASON_FORBIDDEN;
	case RTSP_NOT_FOUND: 
		return RTSP_REASON_NOT_FOUND;
	case RTSP_METHOD_NOT_ALLOWED:
		return RTSP_REASON_METHOD_NOT_ALLOWED;
	case RTSP_NOT_ACCEPTABLE: 
		return RTSP_REASON_NOT_ACCEPTABLE;
	case RTSP_PROXY_AUTHENTICATION_REQUIRED: 
		return RTSP_REASON_PROXY_AUTHENTICATION_REQUIRED;
	case RTSP_REQUEST_TIMEOUT: 
		return RTSP_REASON_REQUEST_TIMEOUT;
	case RTSP_GONE: 
		return RTSP_REASON_GONE;
	case RTSP_LENGTH_REQUIRED: 
		return RTSP_REASON_LENGTH_REQUIRED;
	case RTSP_PRECONDITION_FAILED: 
		return RTSP_REASON_PRECONDITION_FAILED;
	case RTSP_REQUEST_ENTITY_TOO_LARGE: 
		return RTSP_REASON_REQUEST_ENTITY_TOO_LARGE;
	case RTSP_REQUEST_URI_TOO_LONG: 
		return RTSP_REASON_REQUEST_URI_TOO_LONG;
	case RTSP_UNSUPPORTED_MEDIA_TYPE: 
		return RTSP_REASON_UNSUPPORTED_MEDIA_TYPE;
	case RTSP_INVALID_PARAMETER:
		return RTSP_REASON_INVALID_PARAMETER;
	case RTSP_ILLEGAL_CONFERENCE_IDENTIFIER:
		return RTSP_REASON_ILLEGAL_CONFERENCE_IDENTIFIER;
	case RTSP_NOT_ENOUGH_BANDWIDTH:
		return RTSP_REASON_NOT_ENOUGH_BANDWIDTH;
	case RTSP_SESSION_NOT_FOUND:
		return RTSP_REASON_SESSION_NOT_FOUND;
	case RTSP_METHOD_NOT_VALID_IN_THIS_STATE:
		return RTSP_REASON_METHOD_NOT_VALID_IN_THIS_STATE;
	case RTSP_HEADER_FIELD_NOT_VALID:
		return RTSP_REASON_HEADER_FIELD_NOT_VALID;
	case RTSP_INVALID_RANGE:
		return RTSP_REASON_INVALID_RANGE;
	case RTSP_PARAMETER_IS_READ_ONLY:
		return RTSP_REASON_PARAMETER_IS_READ_ONLY;
	case RTSP_AGGREGATE_OPERATION_NOT_ALLOWED:
		return RTSP_REASON_AGGREGATE_OPERATION_NOT_ALLOWED;
	case RTSP_ONLY_AGGREGATE_OPERATION_ALLOWED:
		return RTSP_REASON_ONLY_AGGREGATE_OPERATION_ALLOWED;
	case RTSP_UNSUPPORTED_TRANSPORT:
		return RTSP_REASON_UNSUPPORTED_TRANSPORT;
	case RTSP_DESTINATION_UNREACHABLE:
		return RTSP_REASON_DESTINATION_UNREACHABLE;

	case RTSP_INTERNAL_SERVER_ERROR: 
		return RTSP_REASON_INTERNAL_SERVER_ERROR;
	case RTSP_NOT_IMPLEMENTED: 
		return RTSP_REASON_NOT_IMPLEMENTED;
	case RTSP_BAD_GATEWAY: 
		return RTSP_REASON_BAD_GATEWAY;
	case RTSP_SERVICE_UNAVAILABLE:
		return RTSP_REASON_SERVICE_UNAVAILABLE;
	case RTSP_GATEWAY_TIMEOUT: 
		return RTSP_REASON_GATEWAY_TIMEOUT;
	case RTSP_VERSION_NOT_SUPPORTED: 
		return RTSP_REASON_VERSION_NOT_SUPPORTED;
	case RTSP_OPTION_NOT_SUPPORTED:
		return RTSP_REASON_OPTION_NOT_SUPPORTED;
	default: 
		return RTSP_REASON_UNKNOWN;
	}
}


} // namespace RTSP
