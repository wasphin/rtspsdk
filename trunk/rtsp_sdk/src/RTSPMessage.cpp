/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Message class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/


#include "Poco/NumberFormatter.h"
#include "Poco/NumberParser.h"
#include "Poco/String.h"

#include "RTSPMessage.h"

using Poco::NumberFormatter;
using Poco::NumberParser;
using Poco::icompare;
using Poco::Net::MediaType;

namespace RTSP {

const std::string RTSPMessage::RTSP_1_0                   = "RTSP/1.0";
const int         RTSPMessage::UNKNOWN_CONTENT_LENGTH     = -1;
const std::string RTSPMessage::UNKNOWN_CONTENT_TYPE;
const std::string RTSPMessage::CONTENT_LENGTH             = "Content-Length";
const std::string RTSPMessage::CONTENT_TYPE               = "Content-Type";
const std::string RTSPMessage::CONNECTION                 = "Connection";
const std::string RTSPMessage::CONNECTION_CLOSE           = "close";


RTSPMessage::RTSPMessage():
	_version(RTSP_1_0)
{
}


RTSPMessage::RTSPMessage(const std::string& version):
	_version(version)
{
}


RTSPMessage::~RTSPMessage()
{
}


void RTSPMessage::setVersion(const std::string& version)
{
	_version = version;
}


void RTSPMessage::setContentLength(int length)
{
	if (length != UNKNOWN_CONTENT_LENGTH)
	{
		set(CONTENT_LENGTH, NumberFormatter::format(length));
	}
	else
	{
		erase(CONTENT_LENGTH);
	}
}

	
int RTSPMessage::getContentLength() const
{
	if (has(CONTENT_LENGTH))
	{
		return NumberParser::parse(get(CONTENT_LENGTH));
	}
	else
	{
		return UNKNOWN_CONTENT_LENGTH;
	}
}

	
void RTSPMessage::setContentType(const std::string& mediaType)
{
	if (mediaType.empty())
	{
		erase(CONTENT_TYPE);
	}
	else
	{
		set(CONTENT_TYPE, mediaType);
	}
}


void RTSPMessage::setContentType(const MediaType& mediaType)
{
	setContentType(mediaType.toString());
}

	
const std::string& RTSPMessage::getContentType() const
{
	if (has(CONTENT_TYPE))
	{
		return get(CONTENT_TYPE);
	}
	else
	{
		return UNKNOWN_CONTENT_TYPE;
	}
}

} // namespace RTSP