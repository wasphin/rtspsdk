/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Stream classes
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/


#include "RTSPStream.h"
#include "RTSPSession.h"


namespace RTSP {


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPStreamBuf class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


RTSPStreamBuf::RTSPStreamBuf(RTSPSession& session, openmode mode):
	RTSPBasicStreamBuf(HTTPBufferAllocator::BUFFER_SIZE, mode),
	_session(session),
	_mode(mode)
{
}


RTSPStreamBuf::~RTSPStreamBuf()
{
}


void RTSPStreamBuf::close()
{
	if (_mode & std::ios::out)
	{
		sync();
	}
}


int RTSPStreamBuf::readFromDevice(char* buffer, std::streamsize length)
{
	return _session.read(buffer, length);
}


int RTSPStreamBuf::writeToDevice(const char* buffer, std::streamsize length)
{

	return _session.write(buffer, length);
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPIOS class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


RTSPIOS::RTSPIOS(RTSPSession& session, RTSPStreamBuf::openmode mode):
	_buf(session, mode)
{
	poco_ios_init(&_buf);
}


RTSPIOS::~RTSPIOS()
{
	try
	{
		_buf.close();
	}
	catch (...)
	{
	}
}


RTSPStreamBuf* RTSPIOS::rdbuf()
{
	return &_buf;
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPInputStream class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Poco::MemoryPool RTSPInputStream::_pool(sizeof(RTSPInputStream));


RTSPInputStream::RTSPInputStream(RTSPSession& session):
	RTSPIOS(session, std::ios::in),
	std::istream(&_buf)
{
}


RTSPInputStream::~RTSPInputStream()
{
}


void* RTSPInputStream::operator new(std::size_t size)
{
	return _pool.get();
}


void RTSPInputStream::operator delete(void* ptr)
{
	_pool.release(ptr);
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPOutputStream class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Poco::MemoryPool RTSPOutputStream::_pool(sizeof(RTSPOutputStream));


RTSPOutputStream::RTSPOutputStream(RTSPSession& session):
	RTSPIOS(session, std::ios::out),
	std::ostream(&_buf)
{
}


RTSPOutputStream::~RTSPOutputStream()
{
}


void* RTSPOutputStream::operator new(std::size_t size)
{
	return _pool.get();
}


void RTSPOutputStream::operator delete(void* ptr)
{
	_pool.release(ptr);
}


} // namespace RTSP
