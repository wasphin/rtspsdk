/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Client Sessions Instantiator Class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/


#include "RTSPSessionInstantiator.h"
#include "RTSPSessionFactory.h"
#include "RTSPClientSession.h"


using Poco::URI;


namespace RTSP {


RTSPSessionInstantiator::RTSPSessionInstantiator():
	_proxyPort(0)
{
}


RTSPSessionInstantiator::~RTSPSessionInstantiator()
{
}


RTSPClientSession* RTSPSessionInstantiator::createClientSession(const Poco::URI& uri)
{
	poco_assert(uri.getScheme() == "rtsp");
	RTSPClientSession* pSession = new RTSPClientSession(uri.getHost(), uri.getPort());
	pSession->setProxy(proxyHost(), proxyPort());
	return pSession;
}


void RTSPSessionInstantiator::registerInstantiator()
{
	RTSPSessionFactory::defaultFactory().registerProtocol("rtsp", new RTSPSessionInstantiator);
}


void RTSPSessionInstantiator::unregisterInstantiator()
{
	RTSPSessionFactory::defaultFactory().unregisterProtocol("rtsp");
}


void RTSPSessionInstantiator::setProxy(const std::string& host, Poco::UInt16 port)
{
	_proxyHost = host;
	_proxyPort = port;
}


} // namespace RTSP
