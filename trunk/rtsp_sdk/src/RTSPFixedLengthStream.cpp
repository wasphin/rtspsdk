/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Fixed Length Stream classes
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/


#include "RTSPFixedLengthStream.h"
#include "RTSPSession.h"


namespace RTSP {


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPFixedLengthStreamBuf class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


RTSPFixedLengthStreamBuf::RTSPFixedLengthStreamBuf(RTSPSession& session, std::streamsize length, openmode mode):
	RTSPBasicStreamBuf(HTTPBufferAllocator::BUFFER_SIZE, mode),
	_session(session),
	_length(length),
	_count(0)
{
}


RTSPFixedLengthStreamBuf::~RTSPFixedLengthStreamBuf()
{
}


int RTSPFixedLengthStreamBuf::readFromDevice(char* buffer, std::streamsize length)
{
	int n = 0;
	if (_count < _length)
	{
		if (_count + length > _length)
			length = _length - _count;
		n = _session.read(buffer, length);
		if (n > 0) _count += n;
	}
	return n;
}


int RTSPFixedLengthStreamBuf::writeToDevice(const char* buffer, std::streamsize length)
{
	int n = 0;
	if (_count < _length)
	{
		if (_count + length > _length)
			length = _length - _count;
		n = _session.write(buffer, length);
		if (n > 0) _count += n;
	}
	return n;
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPFixedLengthIOS class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


RTSPFixedLengthIOS::RTSPFixedLengthIOS(RTSPSession& session, std::streamsize length, RTSPFixedLengthStreamBuf::openmode mode):
	_buf(session, length, mode)
{
	poco_ios_init(&_buf);
}


RTSPFixedLengthIOS::~RTSPFixedLengthIOS()
{
	try
	{
		_buf.sync();
	}
	catch (...)
	{
	}
}


RTSPFixedLengthStreamBuf* RTSPFixedLengthIOS::rdbuf()
{
	return &_buf;
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPFixedLengthInputStream class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Poco::MemoryPool RTSPFixedLengthInputStream::_pool(sizeof(RTSPFixedLengthInputStream));


RTSPFixedLengthInputStream::RTSPFixedLengthInputStream(RTSPSession& session, std::streamsize length):
	RTSPFixedLengthIOS(session, length, std::ios::in),
	std::istream(&_buf)
{
}


RTSPFixedLengthInputStream::~RTSPFixedLengthInputStream()
{
}


void* RTSPFixedLengthInputStream::operator new(std::size_t size)
{
	return _pool.get();
}


void RTSPFixedLengthInputStream::operator delete(void* ptr)
{
	_pool.release(ptr);
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	RTSPFixedLengthOutputStream class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Poco::MemoryPool RTSPFixedLengthOutputStream::_pool(sizeof(RTSPFixedLengthOutputStream));


RTSPFixedLengthOutputStream::RTSPFixedLengthOutputStream(RTSPSession& session, std::streamsize length):
	RTSPFixedLengthIOS(session, length, std::ios::out),
	std::ostream(&_buf)
{
}


RTSPFixedLengthOutputStream::~RTSPFixedLengthOutputStream()
{
}


void* RTSPFixedLengthOutputStream::operator new(std::size_t size)
{
	return _pool.get();
}


void RTSPFixedLengthOutputStream::operator delete(void* ptr)
{
	_pool.release(ptr);
}


} // namespace RTSP
