/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Session Class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/


#include "RTSPSession.h"
#include "Poco/Net/HTTPBufferAllocator.h"
#include "Poco/Net/NetException.h"
#include <cstring>


using Poco::TimeoutException;
using Poco::Net::HTTPBufferAllocator;

namespace RTSP {

RTSPSession::RTSPSession():
	_pBuffer(NULL),
	_pCurrent(NULL),
	_pEnd(NULL),
	_timeout(RTSP_DEFAULT_TIMEOUT),
	_pException(NULL),
	_cSeq(1)
{
}


RTSPSession::RTSPSession(const StreamSocket& socket):
	_socket(socket),
	_pBuffer(NULL),
	_pCurrent(NULL),
	_pEnd(NULL),
	_timeout(RTSP_DEFAULT_TIMEOUT),
	_pException(NULL),
	_cSeq(1)
{
}

RTSPSession::~RTSPSession()
{
	if (NULL != _pBuffer)
	{
		HTTPBufferAllocator::deallocate(_pBuffer, HTTPBufferAllocator::BUFFER_SIZE);
	}

	close();
	delete _pException;
}


void RTSPSession::setTimeout(const Poco::Timespan& timeout)
{
	_timeout = timeout;
}


int RTSPSession::get()
{
	if (_pCurrent == _pEnd)
		refill();
	
	if (_pCurrent < _pEnd)
	{
		return *_pCurrent++;
	}
	else
	{
		return std::char_traits<char>::eof();
	}
}

	
int RTSPSession::peek()
{
	if (_pCurrent == _pEnd)
	{
		refill();
	}

	if (_pCurrent < _pEnd)
	{
		return *_pCurrent;
	}
	else
	{
		return std::char_traits<char>::eof();
	}
}

	
int RTSPSession::read(char* buffer, std::streamsize length)
{
	if (_pCurrent < _pEnd)
	{
		int n = (int) (_pEnd - _pCurrent);
		if (n > length)
		{
			n = (int) length;
		}
		std::memcpy(buffer, _pCurrent, n);
		_pCurrent += n;
		return n;
	}
	else 
	{
		return receive(buffer, (int) length);
	}
}


int RTSPSession::write(const char* buffer, std::streamsize length)
{
	try
	{
		return _socket.sendBytes(buffer, (int) length);
	}
	catch (Poco::Exception& exc)
	{
		setException(exc);
		throw;
	}
}


int RTSPSession::receive(char* buffer, int length)
{
	try
	{
		return _socket.receiveBytes(buffer, length);
	}
	catch (Poco::Exception& exc)
	{
		setException(exc);
		throw;
	}
}


void RTSPSession::refill()
{
	if (NULL == _pBuffer)
	{
		_pBuffer = HTTPBufferAllocator::allocate(HTTPBufferAllocator::BUFFER_SIZE);
	}
	_pCurrent = _pEnd = _pBuffer;
	int n = receive(_pBuffer, HTTPBufferAllocator::BUFFER_SIZE);
	_pEnd += n;
}


bool RTSPSession::connected() const
{
	return _socket.impl()->initialized();
}


void RTSPSession::connect(const SocketAddress& address)
{
	_socket.connect(address, _timeout);
	_socket.setReceiveTimeout(_timeout);
	_socket.setNoDelay(true);
}


void RTSPSession::abort()
{
	_socket.shutdown();
	close();
}


void RTSPSession::close()
{
	_socket.close();
}


void RTSPSession::setException(const Poco::Exception& exc)
{
	delete _pException;
	_pException = exc.clone();
}

void RTSPSession::setCSeq(const Poco::UInt16& cSeq)
{
	poco_assert(cSeq > 0);
	_cSeq = cSeq;
}

} // namespace RTSP