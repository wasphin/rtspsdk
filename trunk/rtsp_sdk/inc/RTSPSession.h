/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Session Class
//
//	description:
//		represents basic RTSP session
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/


#ifndef __RTSP_SESSION__H__
#define __RTSP_SESSION__H__


#include "Poco/Net/Net.h"
#include "Poco/Net/StreamSocket.h"
#include "Poco/Timespan.h"
#include "Poco/Exception.h"
#include <ios>

#include "rtsp_sdk.h"

using Poco::Net::StreamSocket;
using Poco::Net::SocketAddress;

namespace RTSP {

class RTSP_SDK_API RTSPSession
	/// RTSPSession implements basic RTSP session management
	/// for both RTSP clients and RTSP servers.
	///
	/// NOTE: RTSP session here differs from the one described 
	/// in RFC 2326.
	/// It represents the whole data exchange sequence between
	//	client and server, but not only the messages with session id.
	///
	/// RTSPSession implements buffering for RTSP connections, as well
	/// as specific support for the various RTSP stream classes.
	///
	/// This class can not be instantiated. RTSPClientSession or
	/// RTSPServerSession must be used instead.
{
public:

	void setTimeout(const Poco::Timespan& timeout);
		/// Sets the timeout for the RTSP session.
		
	Poco::Timespan getTimeout() const;
		/// Returns the timeout for the RTSP session.

	bool connected() const;
		/// Returns true if the underlying socket is connected.

	void abort();
		/// Aborts a session in progress by shutting down
		/// and closing the underlying socket.
		
	const Poco::Exception* networkException() const;
		/// If sending or receiving data over the underlying
		/// socket connection resulted in an exception, a
		/// pointer to this exception is returned.
		/// 
		/// Otherwise, NULL is returned.

	virtual int read(char* buffer, std::streamsize length);
		/// Reads up to length bytes.
		///
		/// If there is data in the buffer, this data
		/// is returned. Otherwise, data is read from
		/// the socket to avoid unnecessary buffering.
	
	virtual int write(const char* buffer, std::streamsize length);
		/// Writes data to the socket.

	int get();
		/// Returns the next byte in the buffer.
		/// Reads more data from the socket if there are
		/// no bytes left in the buffer.

	StreamSocket& socket();
		/// Returns a reference to the underlying socket.

	Poco::UInt16 getCSeq() const;
		/// Returns the sequence counter for the session.

	enum
	{
		RTSP_PORT = 554
	};

protected:
	RTSPSession();
		/// Creates a RTSP session using an
		/// unconnected stream socket.

	RTSPSession(const StreamSocket& socket);
		/// Creates a RTSP session using the
		/// given socket. The session takes ownership
		/// of the socket and closes it when it's no
		/// longer used.

	virtual ~RTSPSession();
		/// Destroys the RTSPSession and closes the
		/// underlying socket.
		
	int peek();
		/// Peeks at the next character in the buffer.
		/// Reads more data from the socket if there are
		/// no bytes left in the buffer.
		
	int receive(char* buffer, int length);
		/// Reads up to length bytes.
		
	void refill();
		/// Refills the internal buffer.
		
	virtual void connect(const SocketAddress& address);
		/// Connects the underlying socket to the given address
		/// and sets the socket's receive timeout.	
		
	void close();
		/// Closes the underlying socket.
		
	void setException(const Poco::Exception& exc);
		/// Stores a clone of the exception.

	void setCSeq(const Poco::UInt16& cSeq);
		/// Sets the sequence counter for the session.

private:
	enum
	{
		RTSP_DEFAULT_TIMEOUT = 60000000
	};
	
	RTSPSession(const RTSPSession&);
	RTSPSession& operator = (const RTSPSession&);
	
	StreamSocket     _socket;
	char*            _pBuffer;
	char*            _pCurrent;
	char*            _pEnd;
	Poco::Timespan   _timeout;
	Poco::Exception* _pException;
	Poco::UInt16	_cSeq;
};


//
// inlines
//

inline Poco::Timespan RTSPSession::getTimeout() const
{
	return _timeout;
}


inline StreamSocket& RTSPSession::socket()
{
	return _socket;
}


inline const Poco::Exception* RTSPSession::networkException() const
{
	return _pException;
}

inline Poco::UInt16 RTSPSession::getCSeq() const
{
	return _cSeq;
}

} // namespace RTSP

#endif // __RTSP_SESSION__H__
