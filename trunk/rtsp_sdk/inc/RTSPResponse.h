/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Response Message class
//
//	description:
//		represents RTSP response message
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

#ifndef __RTSP_RESPONSE__H__
#define __RTSP_RESPONSE__H__


#include <vector>

#include "Poco/Net/Net.h"
#include "Poco/Timestamp.h"

#include "rtsp_sdk.h"
#include "RTSPMessage.h"

namespace RTSP {


class RTSP_SDK_API RTSPResponse: public RTSPMessage
	/// This class encapsulates an RTSP response
	/// message.
	///
	/// In addition to the properties common to
	/// all RTSP messages, a RTSP response has
	/// status code and a reason phrase.
{
public:
	enum RTSPStatus
	{
		RTSP_CONTINUE							= 100,

		RTSP_OK									= 200,
		RTSP_CREATED							= 201,
		RTSP_LOW_ON_STORAGE_SPACE				= 250,

		RTSP_MULTIPLE_CHOICES					= 300,
		RTSP_MOVED_PERMANENTLY					= 301,
		RTSP_MOVED_TEMPORARILY					= 302,
		RTSP_SEE_OTHER							= 303,
		RTSP_USE_PROXY							= 305,

		RTSP_BAD_REQUEST						= 400,
		RTSP_UNAUTHORIZED						= 401,
		RTSP_PAYMENT_REQUIRED					= 402,
		RTSP_FORBIDDEN							= 403,
		RTSP_NOT_FOUND							= 404,
		RTSP_METHOD_NOT_ALLOWED					= 405,
		RTSP_NOT_ACCEPTABLE						= 406,
		RTSP_PROXY_AUTHENTICATION_REQUIRED		= 407,
		RTSP_REQUEST_TIMEOUT					= 408,
		RTSP_GONE								= 410,
		RTSP_LENGTH_REQUIRED					= 411,
		RTSP_PRECONDITION_FAILED				= 412,
		RTSP_REQUEST_ENTITY_TOO_LARGE			= 413,
		RTSP_REQUEST_URI_TOO_LONG				= 414,
		RTSP_UNSUPPORTED_MEDIA_TYPE				= 415,
		RTSP_INVALID_PARAMETER					= 451,
		RTSP_ILLEGAL_CONFERENCE_IDENTIFIER		= 452,
		RTSP_NOT_ENOUGH_BANDWIDTH				= 453,
		RTSP_SESSION_NOT_FOUND					= 454,
		RTSP_METHOD_NOT_VALID_IN_THIS_STATE		= 455,
		RTSP_HEADER_FIELD_NOT_VALID				= 456,
		RTSP_INVALID_RANGE						= 457,
		RTSP_PARAMETER_IS_READ_ONLY				= 458,
		RTSP_AGGREGATE_OPERATION_NOT_ALLOWED	= 459,
		RTSP_ONLY_AGGREGATE_OPERATION_ALLOWED	= 460,
		RTSP_UNSUPPORTED_TRANSPORT				= 461,
		RTSP_DESTINATION_UNREACHABLE			= 462,

		RTSP_INTERNAL_SERVER_ERROR				= 500,
		RTSP_NOT_IMPLEMENTED					= 501,
		RTSP_BAD_GATEWAY						= 502,
		RTSP_SERVICE_UNAVAILABLE				= 503,
		RTSP_GATEWAY_TIMEOUT					= 504,
		RTSP_VERSION_NOT_SUPPORTED				= 505,
		RTSP_OPTION_NOT_SUPPORTED				= 551,
	};

	RTSPResponse();
		/// Creates the RTSPResponse with OK status.
		
	RTSPResponse(RTSPStatus status, const std::string& reason);
		/// Creates the RTSPResponse with the given status
		/// and reason phrase.

	RTSPResponse(const std::string& version, RTSPStatus status, const std::string& reason);
		/// Creates the RTSPResponse with the given version, status
		/// and reason phrase.
		
	RTSPResponse(RTSPStatus status);
		/// Creates the RTSPResponse with the given status
		/// an an appropriate reason phrase.

	RTSPResponse(const std::string& version, RTSPStatus status);
		/// Creates the RTSPResponse with the given version, status
		/// and an appropriate reason phrase.

	virtual ~RTSPResponse();
		/// Destroys the RTSPResponse.

	void setStatus(RTSPStatus status);
		/// Sets the RTSP status code.
		///
		/// Does not change the reason phrase.
		
	RTSPStatus getStatus() const;
		/// Returns the RTSP status code.
		
	void setStatus(const std::string& status);
		/// Sets the RTSP status code.
		///
		/// The string must contain a valid
		/// RTSP numerical status code.
		
	void setReason(const std::string& reason);
		/// Sets the RTSP reason phrase.
		
	const std::string& getReason() const;
		/// Returns the RTSP reason phrase.

	void setStatusAndReason(RTSPStatus status, const std::string& reason);
		/// Sets the RTSP status code and reason phrase.
		
	void setStatusAndReason(RTSPStatus status);
		/// Sets the RTSP status code and reason phrase.
		///
		/// The reason phrase is set according to the status code.

	void setDate(const Poco::Timestamp& dateTime);
		/// Sets the Date header to the given date/time value.
		
	Poco::Timestamp getDate() const;
		/// Returns the value of the Date header.

	void write(std::ostream& ostr) const;
		/// Writes the RTSP response to the given
		/// output stream.

	void read(std::istream& istr);
		/// Reads the RTSP response from the
		/// given input stream.
		///
		/// 100 Continue responses are ignored.
	
	static const std::string& getReasonForStatus(RTSPStatus status);
		/// Returns an appropriate reason phrase
		/// for the given status code.

	static const std::string RTSP_REASON_CONTINUE;

	static const std::string RTSP_REASON_OK;
	static const std::string RTSP_REASON_CREATED;
	static const std::string RTSP_REASON_LOW_ON_STORAGE_SPACE;

	static const std::string RTSP_REASON_MULTIPLE_CHOICES;
	static const std::string RTSP_REASON_MOVED_PERMANENTLY;
	static const std::string RTSP_REASON_MOVED_TEMPORARILY;
	static const std::string RTSP_REASON_SEE_OTHER;
	static const std::string RTSP_REASON_USE_PROXY;

	static const std::string RTSP_REASON_BAD_REQUEST;
	static const std::string RTSP_REASON_UNAUTHORIZED;
	static const std::string RTSP_REASON_PAYMENT_REQUIRED;
	static const std::string RTSP_REASON_FORBIDDEN;
	static const std::string RTSP_REASON_NOT_FOUND;
	static const std::string RTSP_REASON_METHOD_NOT_ALLOWED;
	static const std::string RTSP_REASON_NOT_ACCEPTABLE;
	static const std::string RTSP_REASON_PROXY_AUTHENTICATION_REQUIRED;
	static const std::string RTSP_REASON_REQUEST_TIMEOUT;
	static const std::string RTSP_REASON_GONE;
	static const std::string RTSP_REASON_LENGTH_REQUIRED;
	static const std::string RTSP_REASON_PRECONDITION_FAILED;
	static const std::string RTSP_REASON_REQUEST_ENTITY_TOO_LARGE;
	static const std::string RTSP_REASON_REQUEST_URI_TOO_LONG;
	static const std::string RTSP_REASON_UNSUPPORTED_MEDIA_TYPE;
	static const std::string RTSP_REASON_INVALID_PARAMETER;
	static const std::string RTSP_REASON_ILLEGAL_CONFERENCE_IDENTIFIER;
	static const std::string RTSP_REASON_NOT_ENOUGH_BANDWIDTH;
	static const std::string RTSP_REASON_SESSION_NOT_FOUND;
	static const std::string RTSP_REASON_METHOD_NOT_VALID_IN_THIS_STATE;
	static const std::string RTSP_REASON_HEADER_FIELD_NOT_VALID;
	static const std::string RTSP_REASON_INVALID_RANGE;
	static const std::string RTSP_REASON_PARAMETER_IS_READ_ONLY;
	static const std::string RTSP_REASON_AGGREGATE_OPERATION_NOT_ALLOWED;
	static const std::string RTSP_REASON_ONLY_AGGREGATE_OPERATION_ALLOWED;
	static const std::string RTSP_REASON_UNSUPPORTED_TRANSPORT;
	static const std::string RTSP_REASON_DESTINATION_UNREACHABLE;

	static const std::string RTSP_REASON_INTERNAL_SERVER_ERROR;
	static const std::string RTSP_REASON_NOT_IMPLEMENTED;
	static const std::string RTSP_REASON_BAD_GATEWAY;
	static const std::string RTSP_REASON_SERVICE_UNAVAILABLE;
	static const std::string RTSP_REASON_GATEWAY_TIMEOUT;
	static const std::string RTSP_REASON_VERSION_NOT_SUPPORTED;
	static const std::string RTSP_REASON_OPTION_NOT_SUPPORTED;
	static const std::string RTSP_REASON_UNKNOWN;
	
	static const std::string DATE;

private:
	enum Limits
	{
		MAX_VERSION_LENGTH = 8,
		MAX_STATUS_LENGTH  = 3,
		MAX_REASON_LENGTH  = 512
	};
	
	RTSPStatus  _status;
	std::string _reason;
	
	RTSPResponse(const RTSPResponse&);
	RTSPResponse& operator = (const RTSPResponse&);
};


//
// inlines
//
inline RTSPResponse::RTSPStatus RTSPResponse::getStatus() const
{
	return _status;
}


inline const std::string& RTSPResponse::getReason() const
{
	return _reason;
}


} // namespace RTSP


#endif // __RTSP_RESPONSE__H__
