/*****************************************************************************
//	RTSP SDK Base Classes
//
//	RTSP Client Session Class
//
//	description:
//		represents client-side RTSP session
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/


#ifndef __RTSP_CLIENT_SESSION__H__
#define __RTSP_CLIENT_SESSION__H__


#include "Poco/Net/Net.h"
#include "Poco/Net/SocketAddress.h"
#include <istream>
#include <ostream>

#include "rtsp_sdk.h"
#include "RTSPSession.h"

namespace RTSP {


class RTSPRequest;
class RTSPResponse;



class RTSP_SDK_API RTSPClientSession: public RTSPSession
	/// This class implements the client-side of
	/// a RTSP session.
	///
	/// To send a RTSP request to a RTSP server, first
	/// instantiate a RTSPClientSession object and
	/// specify the server's host name and port number.
	///
	/// Then create a RTSPRequest object, fill it accordingly,
	/// and pass it as argument to the sendRequest() method.
	///
	/// sendRequest() will return an output stream that can
	/// be used to send the request body, if there is any.
	///
	/// After you are done sending the request body, create
	/// a RTSPResponse object and pass it to receiveResponse().
	///
	/// This will return an input stream that can be used to
	/// read the response body.
	///
	/// See RFC 2326 <http://www.faqs.org/rfcs/rfc2326.html> for more
	/// information about the RTSP protocol.
{
public:
	RTSPClientSession();
		/// Creates an unconnected RTSPClientSession.

	explicit RTSPClientSession(const StreamSocket& socket);
		/// Creates a RTSPClientSession using the given socket.
		/// The socket must not be connected. The session
		/// takes ownership of the socket.

	explicit RTSPClientSession(const SocketAddress& address);
		/// Creates a RTSPClientSession using the given address.

	RTSPClientSession(const std::string& host, Poco::UInt16 port = RTSPSession::RTSP_PORT);
		/// Creates a RTSPClientSession using the given host and port.

	virtual ~RTSPClientSession();
		/// Destroys the RTSPClientSession and closes
		/// the underlying socket.

	void setHost(const std::string& host);
		/// Sets the host name of the target RTSP server.
		///
		/// The host must not be changed once there is an
		/// open connection to the server.
		
	const std::string& getHost() const;
		/// Returns the host name of the target RTSP server.
		
	void setPort(Poco::UInt16 port);
		/// Sets the port number of the target RTSP server.
		///
		/// The port number must not be changed once there is an
		/// open connection to the server.
	
	Poco::UInt16 getPort() const;
		/// Returns the port number of the target RTSP server.

	void setProxy(const std::string& host, Poco::UInt16 port = RTSPSession::RTSP_PORT);
		/// Sets the proxy host name and port number.
		
	void setProxyHost(const std::string& host);
		/// Sets the host name of the proxy server.
		
	void setProxyPort(Poco::UInt16 port);
		/// Sets the port number of the proxy server.
		
	const std::string& getProxyHost() const;
		/// Returns the proxy host name.
		
	Poco::UInt16 getProxyPort() const;
		/// Returns the proxy port number.
/* NB!
	void setKeepAliveTimeout(const Poco::Timespan& timeout);
		/// Sets the connection timeout for HTTP connections.
		
	const Poco::Timespan& getKeepAliveTimeout() const;
		/// Returns the connection timeout for HTTP connections.
*/		
	virtual std::ostream& sendRequest(RTSPRequest& request);
		/// Sends the header for the given RTSP request to
		/// the server.
		///
		/// The returned output stream can be used to write
		/// the request body. The stream is valid until
		/// receiveResponse() is called or the session
		/// is destroyed.
		
	virtual std::istream& receiveResponse(RTSPResponse& response);
		/// Receives the header for the response to the previous 
		/// RTSP request.
		///
		/// The returned input stream can be used to read
		/// the response body. The stream is valid until
		/// sendRequest() is called or the session is
		/// destroyed.
	
protected:
	
	void reconnect();
		/// Connects the underlying socket to the RTSP server.

	int write(const char* buffer, std::streamsize length);
		/// Writes the specified buffer.
	
	virtual std::string getHostInfo() const;
		/// Returns the target host and port number for proxy requests.

	void deleteResponseStream();
		/// Deletes the response stream and sets it to NULL.

	void deleteRequestStream();
		/// Deletes the request stream and sets it to NULL.

	void setResponseStream(std::istream* pRespStream);
		/// Sets the response stream iff _pResponseStream is NULL.

	void setRequestStream(std::ostream* pRequestStream);
		/// Sets the request stream iff _pRequestStream is NULL.

	std::istream* getResponseStream() const;
		/// Returns the currently set response stream. Can return NULL.

	std::ostream* getRequestStream() const;
		/// Returns the currently set request stream. Can return NULL.

	void setReconnect(bool recon);
		/// Sets _reconnect.

private:
	std::string     _host;
	Poco::UInt16    _port;
	std::string     _proxyHost;
	Poco::UInt16    _proxyPort;
/* NB!	Poco::Timespan  _keepAliveTimeout;*/
	Poco::Timestamp _lastRequest;
	bool            _reconnect;
	bool            _mustReconnect;
	std::ostream*   _pRequestStream;
	std::istream*   _pResponseStream;
	
	RTSPClientSession(const RTSPClientSession&);
	RTSPClientSession& operator = (const RTSPClientSession&);
};


//
// inlines
//
inline const std::string& RTSPClientSession::getHost() const
{
	return _host;
}


inline Poco::UInt16 RTSPClientSession::getPort() const
{
	return _port;
}


inline const std::string& RTSPClientSession::getProxyHost() const
{
	return _proxyHost;
}


inline Poco::UInt16 RTSPClientSession::getProxyPort() const
{
	return _proxyPort;
}


inline std::istream* RTSPClientSession::getResponseStream() const
{
	return _pResponseStream;
}


inline std::ostream* RTSPClientSession::getRequestStream() const
{
	return _pRequestStream;
}


inline void RTSPClientSession::setReconnect(bool recon)
{
	_reconnect = recon;
}


/* NB!
inline const Poco::Timespan& RTSPClientSession::getKeepAliveTimeout() const
{
	return _keepAliveTimeout;
}
*/

} // namespace RTSP


#endif // __RTSP_CLIENT_SESSION__H__
