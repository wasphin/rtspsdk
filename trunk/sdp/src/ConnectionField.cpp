/*****************************************************************************
//	SDP Parser Classes
//
//	Connection Field Class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Includes
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//	PoCo headers
#include "Poco/NumberParser.h"
#include "Poco/NumberFormatter.h"
#include "Poco/Exception.h"
#include "Poco/Util/OptionException.h"
#include "Poco/Net/IPAddress.h"

#include "ConnectionField.h"

using std::string;

using Poco::NumberParser;
using Poco::NumberFormatter;
using Poco::NullPointerException;
using Poco::Util::InvalidArgumentException;
using Poco::Net::IPAddress;

namespace SDP {

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	ConnectionField class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Static members initialization 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

const string ConnectionField :: InterNetwork	=	"IN";
const string ConnectionField :: IPv4			=	"IPv4";
const string ConnectionField :: IPv6			=	"IPv6";

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Public methods
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ConnectionField :: ConnectionField()
	: Field("c", "")
{
}

ConnectionField :: ConnectionField(const string & value)
	: Field("c", value)
{
	Init();
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ConnectionField :: ConnectionField(const AddressRange & address)
	: Field("c", "IN IP4 " + address.toString())
{
	Init();
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ConnectionField :: ConnectionField(const AddressRange & address,
								   const string & networkType,
								   const string & addressType)
	: Field("c", networkType + " " + addressType + " " + address.toString())
{
	Init();
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ConnectionField :: ConnectionField(const ConnectionField & connectionField)
	: Field(connectionField)
	, _address(connectionField._address)
	,_addressType(connectionField._addressType)
	,_networkType(connectionField._networkType)
{
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ConnectionField & ConnectionField :: operator=(const ConnectionField & connectionField)
{
	if(&connectionField != this)
	{
		_address = connectionField._address;
		_addressType = connectionField._addressType;
		_networkType = connectionField._networkType;

		Field::operator=(connectionField);
	}
	return *this;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inline AddressRange ConnectionField :: getAddress() const
{
	return _address;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inline string ConnectionField :: getAddressType() const
{
	return _addressType;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inline string ConnectionField :: getNetworkType() const
{
	return _networkType;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

string ConnectionField :: getValue() const
{
	return _networkType + " " + _addressType+ " " + _address.toString();
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Private methods
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

void ConnectionField :: Init()
{
	StringVec parts = split(_value, ' ');
	if(3 != parts.size())
	{
		throw new InvalidArgumentException("ConnectionField ctor() - invalid connection field!");
	}

	_networkType = parts[0];
	_addressType = parts[1];

	StringVec addrParts = split(parts[2], '/');
	if(1 == addrParts.size())
	{
		_address = AddressRange(IPAddress(addrParts[0]));
	}
	else if(2 == addrParts.size())
	{
		_address = AddressRange(IPAddress(addrParts[0]), 
								NumberParser::parse(addrParts[1]));
	}
	else if(3 == addrParts.size())
	{
		_address = AddressRange(IPAddress(addrParts[0]),
								NumberParser::parseUnsigned(addrParts[2]),
								NumberParser::parse(addrParts[1]));
	}
	else
	{
		throw new InvalidArgumentException("ConnectionField ctor() - invalid address!");
	}
}

} //	namespace SDP
