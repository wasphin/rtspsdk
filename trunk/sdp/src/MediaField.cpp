/*****************************************************************************
//	SDP Parser Classes
//
//	Media Field Class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Includes
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//	PoCo headers
#include "Poco/NumberParser.h"
#include "Poco/Util/OptionException.h"

#include "MediaField.h"

using std::string;

using Poco::NumberParser;
using Poco::Util::InvalidArgumentException;

namespace SDP {

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	MediaField class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Public methods
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MediaField :: MediaField()
	: Field("m", "")
{
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MediaField :: MediaField(std::string & value)
	: Field("m", value)
{
	//	split value string to the parts
	StringVec parts = split(value, ' ');

	_mediaType = parts[0];
	string::size_type slashPos = parts[1].find("/");
	if(string::npos == slashPos)
	{
		_mediaPorts = PortRange(NumberParser::parseUnsigned(parts[1]));
	}
	else
	{
		string firstPort = parts[1].substr(0, slashPos);
		string numberOfPorts = parts[1].substr(slashPos + 1);
		_mediaPorts = PortRange(NumberParser::parseUnsigned(firstPort),
								NumberParser::parseUnsigned(numberOfPorts));
	}

	_protocol = parts[2];

	_mediaFormats.assign(parts.begin() + 3, parts.end());

}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MediaField :: MediaField(std::string mediaType,
						 std::string protocol,
						 PortRange ports,
						 StringVec formats)
	: _mediaType(mediaType)
	, _protocol(protocol)
	, _mediaFormats(formats)
{
	_mediaPorts = PortRange(ports);
	_type = 'm';
	_value = buildValueString();
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MediaField :: MediaField(const MediaField & mediaField)
	: Field(mediaField)
	, _mediaType(mediaField._mediaType)
	, _mediaPorts(mediaField._mediaPorts)
	, _protocol(mediaField._protocol)
	, _mediaFormats(mediaField._mediaFormats)
{
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MediaField & MediaField :: operator=(const MediaField & mediaField)
{
	if(&mediaField != this)
	{
		_mediaType = mediaField._mediaType;
		_mediaPorts = mediaField._mediaPorts;
		_protocol = mediaField._protocol;
		_mediaFormats = mediaField._mediaFormats;

		Field::operator=(mediaField);
	}

	return *this;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inline std::string MediaField :: getMediaType() const
{
	return _mediaType;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inline PortRange MediaField :: getMediaPorts() const
{
	return _mediaPorts;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inline std::string MediaField :: getProtocol() const
{
	return _protocol;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

inline StringVec MediaField :: getMediaFormats() const
{
	return _mediaFormats;
}
 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Protected methods
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

std::string MediaField :: buildValueString()
{
	string value = _mediaType + " " + _mediaPorts.toString() + " " + _protocol;
	for(StringVec::iterator iter = _mediaFormats.begin();
		_mediaFormats.end() != iter;
		++iter)
	{
		value += " " + *iter;
	}

	return value;
}

} //	namespace SDP
