/*****************************************************************************
//	SDP Parser Classes
//
//	NTP Time Class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Includes
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//	PoCo headers
#include "Poco/DateTime.h"
#include "Poco/LocalDateTime.h"
#include "Poco/Timestamp.h"
#include "Poco/Timespan.h"
#include "Poco/RegularExpression.h"
#include "Poco/NumberParser.h"
#include "Poco/Util/OptionException.h"

//	STL headers
#include <map>

#include "NTPTime.h"

using std::string;
using std::map;

using Poco::Int64;
using Poco::DateTime;
using Poco::LocalDateTime;
using Poco::Timespan;
using Poco::Timestamp;
using Poco::RegularExpression;
using Poco::NumberParser;
using Poco::InvalidArgumentException;

namespace SDP {

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	NTPTime class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Static members initialization
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DateTime NTPTime :: epoch = DateTime(1900, 1, 1);

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Public methods
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Poco::Int64 NTPTime :: getNTPTime(const DateTime & date)
{
	//	convert UTC date-time to local
	LocalDateTime localDate(date);

	//	calculate time span from 12:00:00 midnight, January 1, 0001 Anno Domini (Common Era)
	LocalDateTime epoch(1, 1, 1);
	Timespan span = localDate - epoch;

	//	correct according to possible summer time offset
	Int64 offset = (localDate.tzd() - epoch.tzd());
	offset *= 100000;

	return ((span.totalMicroseconds() + offset) / 100) + NTPCONST;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Int64 NTPTime :: getNTPTime(const Timespan & timespan)
{
	return (timespan.totalMicroseconds() / 100) + NTPCONST;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DateTime NTPTime :: getDateTime(Int64 ntpTime)
{
	return DateTime(Timestamp((ntpTime - NTPCONST) * 100));
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Timespan NTPTime :: getTimeSpan(const string & typedTimeString)
{
	//	use map to save the parsed values
	map<string, int> parsedValues;
	parsedValues["d"] = 0;
	parsedValues["h"] = 0;
	parsedValues["m"] = 0;
	parsedValues["s"] = 0;

	//	parse the string
	RegularExpression re("(\\d+)(\\w)");
	RegularExpression::MatchVec matches;

	string::size_type offset = 0;
	int result = 0;
	do
	{
		result = re.match(typedTimeString, offset, matches);
		if(0 != matches.size())
		{
			offset = matches[0].length + matches[0].offset;
			string timePeriod = typedTimeString.substr(matches[1].offset, 
													   matches[1].length);
			string timeType = typedTimeString.substr(matches[2].offset, 
													 matches[2].length);
			if(parsedValues.count(timeType) > 0)
			{
				parsedValues[timeType] += NumberParser::parse(timePeriod);
			}
			else
			{
				throw new InvalidArgumentException("NTPTime::getTimeSpan() - invalid string to parse!");
			}
		}
	}
	while(0 != result);

	return Timespan(parsedValues["d"],
					parsedValues["h"],
					parsedValues["m"],
					parsedValues["s"],
					0);
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Timespan NTPTime :: getTimeSpan(Int64 ntpTime)
{
	return Timespan((ntpTime - NTPCONST) * 100);
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*
Int64 NTPTime :: GetTime()
{
	// TODO: implement this method when NTP Client will be ready 

	return 0;
}
*/
} //	namespace SDP
