/*****************************************************************************
//	SDP Parser Classes
//
//	Field Factory Class
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Includes
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//	PoCo headers
#include "Poco/Util/OptionException.h"

#include "FieldFactory.h"

using std::string;

using Poco::Util::InvalidArgumentException;

namespace SDP {

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	AddressRange class implementation
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Public methods
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Field * FieldFactory :: CreateInstance(const string & fieldString)
{
	//	determine the type of the field
	StringVec parts;
	string::size_type pos = fieldString.find('=');
	if(string::npos == pos)
	{
		throw new InvalidArgumentException("FieldFactory::CreateInstance() - invalid field taken!");
	}
	
	parts.push_back(fieldString.substr(0, pos));
	parts.push_back(fieldString.substr(pos + 1));


	//	try to create the appropriate field
	Field * pField = NULL;

	if("a" == parts[0])
	{
		pField = new AttributeField(parts[1]);
	}
	else if("b" == parts[0])
	{
		pField = new BandwidthField(parts[1]);
	}
	else if("c" == parts[0])
	{
		pField = new ConnectionField(parts[1]);
	}
	else if("e" == parts[0])
	{
		pField = new EMailField(parts[1]);
	}
	else if("i" == parts[0])
	{
		pField = new InfoField(parts[1]);
	}
	else if("k" == parts[0])
	{
		pField = new KeyField(parts[1]);
	}
	else if("m" == parts[0])
	{
		pField = new MediaField(parts[1]);
	}
	else if("o" == parts[0])
	{
		pField = new OriginField(parts[1]);
	}
	else if("p" == parts[0])
	{
		pField = new PhoneField(parts[1]);
	}	
	else if("r" == parts[0])
	{
		pField = new TimeRepetitionField(parts[1]);
	}
	else if("s" == parts[0])
	{
		pField = new SessionNameField(parts[1]);
	}
	else if("t" == parts[0])
	{
		pField = new TimeField(parts[1]);
	}
	else if("u" == parts[0])
	{
		pField = new URIField(parts[1]);
	}
	else if("v" == parts[0])
	{
		pField = new VersionField(parts[1]);
	}
	else if("z" == parts[0])
	{
		pField = new TimeZoneAdjustmentField(parts[1]);
	}
	else
	{
		//	unknown field type
		throw new InvalidArgumentException("FieldFactory::CreateInstance() - unknown field type!");
	}

	return pField;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

void FieldFactory :: DestroyInstance(Field * pField)
{
	if(NULL != pField)
	{
		delete pField;
	}
}

} //	namespace SDP
