/*****************************************************************************
//	SDP Parser Classes
//
//	Media Field Class
//
//	description:
//		represents SDP description media field
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

#ifndef __MEDIA_FIELD__H__
#define __MEDIA_FIELD__H__

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Includes
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#include "sdp_parser.h"
#include "common.h"
#include "Field.h"
#include "PortRange.h"

namespace SDP {

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	MediaField class
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class SDP_PARSER_API MediaField : public Field
	/// A Media represents an m= field contained within a MediaDescription. The Media identifies 
	/// information about the format(s) of the media associated with the MediaDescription. 
	/// 
	/// The Media field includes:
	///   - a mediaType (e.g. audio, video, etc.)
	///   - a port number (or set of ports)
	///   - a protocol to be used (e.g. RTP/AVP)
	///   - a set of media formats which correspond to Attributes associated with the media description.
	/// Here is an example:
	/// 
	///   m=audio 60000 RTP/AVP 0
	///   a=rtpmap:0 PCMU/8000
	/// 
	/// This example identifies that the client can receive audio on port 60000 in format 0 which 
	/// corresponds to PCMU/8000.
{
public:

	MediaField();
	/// Creates an empty MediaField.

	MediaField(std::string & value);
	/// Creates a new MediaField with the specified value.

	MediaField(std::string mediaType,
			   std::string protocol,
			   PortRange ports, 
			   StringVec formats);
	/// Creates a new MediaField with the full set of specified parameters.

	MediaField(const MediaField & mediaField);
	/// Creates a copy of specified MediaField object.

	MediaField & operator=(const MediaField & mediaField);
	/// Copies the specified MediaField object.

	std::string	getMediaType() const;
	/// Returns field's media type.

	PortRange getMediaPorts() const;
	/// Returns the range of ports.

	std::string getProtocol() const;
	/// Returns the network transport protocol for this media.

	StringVec getMediaFormats() const;
	/// Returns a list of media formats. From RFC 2327 :
    /// 
    ///   The fourth and subsequent sub-fields are media formats.  For audio
    ///   and video, these will normally be a media payload type as defined
    ///   in the RTP Audio/Video Profile.
    ///   
    ///   When a list of payload formats is given, this implies that all of
    ///   these formats may be used in the session, but the first of these
    ///   formats is the default format for the session.
    ///   
    ///   For media whose transport protocol is not RTP or UDP the format
    ///   field is protocol specific.  Such formats should be defined in an
    ///   additional specification document.

protected:

	std::string buildValueString();
	/// Builds a full string representing the field value.

private:

	std::string				_mediaType;
	PortRange	 			_mediaPorts;
	std::string				_protocol;
	StringVec				_mediaFormats;
};

} //	namespace SDP

#endif	//	__MEDIA_FIELD__H__

