/*****************************************************************************
//	SDP Parser Classes
//
//	Session Description Class
//
//	description:
//		describes a session
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

#ifndef __SESSION_DESCRIPTION__H__
#define __SESSION_DESCRIPTION__H__

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Includes
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#include "sdp_parser.h"
#include "common.h"

#include "BandwidthField.h"
#include "ConnectionField.h"
#include "EMailField.h"
#include "InfoField.h"
#include "KeyField.h"
#include "OriginField.h"
#include "PhoneField.h"
#include "SessionNameField.h"
#include "TimeZoneAdjustmentField.h"
#include "URIField.h"
#include "VersionField.h"
#include "TimeDescription.h"
#include "MediaDescription.h"

namespace SDP {

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Definitions and macroses
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

typedef std::vector<TimeDescription> TimeVec;
typedef std::vector<TimeZoneAdjustmentField> TimeZoneAdjustmentFieldVec;
typedef std::vector<MediaDescription> MediaVec;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	SessionDescription class
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class SDP_PARSER_API SessionDescription
    /// This class describes a session.
{
public:

	SessionDescription(const OriginField & originator,
					   const SessionNameField & sessionName,
					   const TimeVec & times);
	/// Creates a new SessionDescription with the specified originator of the session,
	/// the name of the session and the times this session will be active.

	SessionDescription(const std::string & sessionDescription);
	/// Creates a new SessionDescription according to a complete existing session description.

	SessionDescription(const SessionDescription & sessionDescription);
	/// Creates a copy of specified SessionDescription object.

	SessionDescription & operator=(const SessionDescription & sessionDescription);
	/// Copies the specified SessionDescription object.

	VersionField getVersion() const;
	/// Gets the version of this specification. This implementation uses version 0.

	OriginField getOriginator() const;
	/// Gets the originator of this session. This field is mandatory.

	void setOriginator(const OriginField & originator);
	/// Sets the originator of this session. This field is mandatory.

	SessionNameField getName() const;
	/// Gets the name of the session. This field is mandatory.

	void setName(const SessionNameField & name);
	/// Sets the name of the session. This field is mandatory.

	InfoField getDescription() const;
	/// Gets a string that describes this session.

	void setDescription(const InfoField & description);
	/// Sets a string that describes this session.

	URIField getURI() const;
	/// Gets the Uri that points to additional information about the session.

	void setURI(const URIField & uri);
	/// Sets the Uri that points to additional information about the session.

	EMailField getEMail() const;
	/// Gets the email address of the person responsible for the conference.

	void setEMail(const EMailField & email);
	/// Sets the email address of the person responsible for the conference.

	PhoneField getPhoneNumber() const;
	/// Gets the phone number of the person responsible for the conference.

	void setPhoneNumber(const PhoneField & phone);
	/// Sets the phone number of the person responsible for the conference.

	ConnectionField getConnectionInfo() const;
	/// Gets the connection information about this session. This is required
	/// if it is not present in ALL media descriptions.

	void setConnectionInfo(const ConnectionField & connectionInfo);
	/// Sets the connection information about this session. This is required
	/// if it is not present in ALL media descriptions.

	BandwidthField getBandwidth() const;
	/// Gets the information for bandwidth usage of this session.

	void setBandwidth(BandwidthField & bandwidth);
	/// Sets the information for bandwidth usage of this session.

	TimeVec getTimes() const;
	/// Gets the TimeDescriptions for this session. At least one is required.

	void setTimes(const TimeVec & times);
	/// Sets the TimeDescriptions for this session. At least one is required.

	TimeZoneAdjustmentFieldVec getTimeZoneAdjustments() const;
	/// Gets the TimeZoneAdjustmentFields for this session.

	void setTimeZoneAdjustments(const TimeZoneAdjustmentFieldVec & timeZoneAdjustments);
	/// Sets the TimeZoneAdjustmentFields for this session. This is
	/// required if any of the TimeDescriptions take place accross a
	/// time zone adjustment, for example daylight savings time or across
	/// an actual geographic time zone boundary.

	KeyField getEncryptionKey() const;
	/// Gets the encryption key.

	void setEncryptionKey(const KeyField & encryptionKey);
	/// Sets the encryption key.

	AttributeVec getAttributes() const;
	/// Gets the attributes used to extend the capabilities of this session.

	void setAttributes(const AttributeVec & attributes);
	/// Sets the attributes used to extend the capabilities of this session.

	MediaVec getMedia() const;
	/// Gets the media descriptions for this session.

	void setMedia(const MediaVec & media);
	/// Sets the media descriptions for this session.

	size_t getMediaCount() const;
	/// Gets the count of media descriptions.

	std::string toString() const;
	/// Converts this session to a string.

private:

	VersionField				_version;
	OriginField					_originator;
	SessionNameField			_name;
	InfoField					_description;
	URIField					_uri;
	EMailField					_email;
	PhoneField					_phone;
	ConnectionField				_connectionInfo;
	BandwidthField				_bandwidth;
	TimeVec						_times;
	TimeZoneAdjustmentFieldVec	_timeZoneAdjustments;
	KeyField					_encryptionKey;
	AttributeVec				_attributes;
	MediaVec					_media;

};

} //	namespace SDP

#endif	//	__SESSION_DESCRIPTION__H__