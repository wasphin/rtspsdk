/*****************************************************************************
//	SDP Parser Classes
//
//	Media Description Class
//
//	description:
//		describes a given media connection
//
//	revision of last commit:
//		$Rev$
//	author of last commit:
//		$Author$
//	date of last commit:
//		$Date$
//
//	created by Argenet {argenet@sibears.org}
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
******************************************************************************/

#ifndef __MEDIA_DESCRIPTION__H__
#define __MEDIA_DESCRIPTION__H__

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Includes
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#include "sdp_parser.h"
#include "common.h"
#include "MediaField.h"
#include "InfoField.h"
#include "ConnectionField.h"
#include "BandwidthField.h"
#include "KeyField.h"
#include "AttributeField.h"


namespace SDP {

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	Definitions and macroses
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

typedef std::vector<AttributeField> AttributeVec;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//	MediaDescription class
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class SDP_PARSER_API MediaDescription
    /// This class describes a given media connection. A SessionDescription
    /// may have zero or more MediaDescription's.
{
public:

	MediaDescription();
	/// Creates an empty MediaDescription.

	MediaDescription(const MediaField & mediaField);
	/// Creates a new MediaDescription with the specified MediaField.

	MediaDescription(const MediaField & mediaField, const InfoField & title);
	/// Creates a new MediaDescription with the specified MediaField and
	/// the title of this media description.

	MediaDescription(const MediaField & mediaField,
					 const InfoField & title,
					 const ConnectionField & connectionInfo);
	/// Creates a new MediaDescription with the specified MediaField, the title of this
	/// media description and the connection information for this description.

	MediaDescription(const MediaField & mediaField,
					 const InfoField & title,
					 const ConnectionField & connectionInfo,
					 const BandwidthField & bandwidth);
	/// Creates a new MediaDescription with the specified MediaField, the title of this
	/// media description, the connection information for this description and the bandwidth
	/// usage information.

	MediaDescription(const MediaField & mediaField,
					 const InfoField & title,
					 const ConnectionField & connectionInfo,
					 const BandwidthField & bandwidth,
					 const KeyField & encryption);
	/// Creates a new MediaDescription with the specified MediaField, the title of this
	/// media description, the connection information for this description, the bandwidth
	/// usage information and the encryption to be used for this media.

	MediaDescription(const MediaField & mediaField,
					 const InfoField & title,
					 const ConnectionField & connectionInfo,
					 const BandwidthField & bandwidth,
					 const KeyField & encryption,
					 const AttributeVec & attributes);
	/// Creates a new MediaDescription with the specified MediaField, the title of this
	/// media description, the connection information for this description, the bandwidth
	/// usage information, the encryption to be used for this media and any attributes
	/// that are to be applied to this description.

	MediaDescription(const std::string & mediaDescription);
	/// Creates a new MediaDescription from a complete existing media description.

	MediaDescription & operator=(const MediaDescription & mediaDescription);
	/// Copies the specified MediaDescription object.

	MediaDescription(const MediaDescription & mediaDescription);
	/// Creates a copy of specified MediaDescription object.

	MediaField getMediaField() const;
	/// Gets the MediaField associated with this description.

	InfoField getTitle() const;
	/// Gets the title of this media.

	void setTitle(const InfoField & title);
	/// Sets the title of this media.

	ConnectionField getConnectionInfo() const;
	/// Gets the connection information.

	void setConnectionInfo(const ConnectionField & connectionInfo);
	/// Sets the connection information.

	BandwidthField getBandwidth() const;
	/// Gets the settings for bandwidth usage.

	void setBandwidth(const BandwidthField & bandwidth);
	/// Sets the settings for bandwidth usage.

	KeyField getEncryptionKey() const;
	/// Gets the encryption key to be used.

	void setEncryptionKey(const KeyField & encryptionKey);
	/// Sets the encryption key to be used.

	AttributeVec getAttributes() const;
	/// Gets extensions to the SDP protocol.

	void setAttributes(const AttributeVec & attributes);
	/// Sets extensions to the SDP protocol.

	std::string toString() const;
	/// Converts the Media Description to a string.

private:

	MediaField			_mediaField;
	InfoField			_title;
	ConnectionField		_connectionInfo;
	BandwidthField		_bandwidth;
	KeyField			_encryptionKey;
	AttributeVec		_attributes;
};

} //	namespace SDP

#endif	//	__MEDIA_DESCRIPTION__H__

